SIDE_BLOCK_LENGTH = 12.36;
SIDE_BLOCK_HEIGHT = 4.9;
SIDE_BLOCK_WIDTH = 6;
SIDE_BLOCK_HOLE_RADIUS = 1.5;
SIDE_BLOCK_HOLE_DEPTH = 3;
SIDE_BLOCK_HOLES_DISTANCE = 23.3;


PLATE_WIDTH=30;
PLATE_LENGTH=38;
PLATE_HEIGHT=2;

REAR_BLOCK_LENGTH=3;
REAR_BLOCK_WIDTH=4;
REAR_BLOCK_HEIGHT=SIDE_BLOCK_HEIGHT;
REAR_BLOCKS_DISTANCE=13;
REAR_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK=0.64;
REAR_BLOCK_X_DISTANCE = (PLATE_WIDTH - (REAR_BLOCKS_DISTANCE+REAR_BLOCK_WIDTH*2)+ xTranslation()) / 2;
echo ("total size of the rear blocks",REAR_BLOCKS_DISTANCE+REAR_BLOCK_WIDTH*2);
echo ("difference", PLATE_WIDTH - (REAR_BLOCKS_DISTANCE+REAR_BLOCK_WIDTH*2));
echo ("rear block x distance:", REAR_BLOCK_X_DISTANCE);

FRONT_BLOCKS_DISTANCE=REAR_BLOCKS_DISTANCE;
FRONT_BLOCK_WIDTH=SIDE_BLOCK_WIDTH;
FRONT_BLOCK_LENGTH=3.6;
FRONT_BLOCK_HEIGHT=REAR_BLOCK_HEIGHT;
FRONT_BLOCK_HOLE_DEPTH=SIDE_BLOCK_HOLE_DEPTH;
FRONT_BLOCK_HOLE_RADIUS=SIDE_BLOCK_HOLE_RADIUS;
FRONT_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK=17.5;
FRONT_BLOCK_TOTAL_WIDTH=FRONT_BLOCK_WIDTH*2+FRONT_BLOCKS_DISTANCE;
echo("Front blocks total distance",FRONT_BLOCK_TOTAL_WIDTH);
DIFFERENCE = PLATE_WIDTH-FRONT_BLOCK_TOTAL_WIDTH;
echo("difference", DIFFERENCE);
echo("X start", DIFFERENCE/2);
echo("xtranslation", xTranslation());
FRONT_BLOCK_X_DISTANCE=(DIFFERENCE/2);// + xTranslation();
echo ("Front block X distance:",FRONT_BLOCK_X_DISTANCE);
echo ("Remaining:",PLATE_WIDTH - (FRONT_BLOCK_X_DISTANCE+FRONT_BLOCK_WIDTH*2+FRONT_BLOCKS_DISTANCE));

WALL_WIDTH=PLATE_WIDTH;
WALL_LENGTH=1.4;
WALL_HEIGHT=17;

USB_HOLE_WIDTH=FRONT_BLOCKS_DISTANCE-FRONT_BLOCK_WIDTH/2;
USB_HOLE_HEIGHT=3.78;
USB_HOLE_STARTING_HEIGHT=1.48;

plate();
wall();
sideBlocks();
rearBlocks();
frontBlocks();

module sideBlock() {
     difference() {
	  cube(size = [SIDE_BLOCK_WIDTH, SIDE_BLOCK_LENGTH, SIDE_BLOCK_HEIGHT]);
	  translate([SIDE_BLOCK_WIDTH/2, SIDE_BLOCK_LENGTH/2,SIDE_BLOCK_HEIGHT-SIDE_BLOCK_HOLE_DEPTH+0.1])  cylinder(h = SIDE_BLOCK_HOLE_DEPTH, r = SIDE_BLOCK_HOLE_RADIUS, center = false, $fn=100);
     }
}

module sideBlocks() {
     sideBlock();
     translate([SIDE_BLOCK_HOLES_DISTANCE-SIDE_BLOCK_WIDTH/2, 0, 0]) sideBlock();
}

module rearBlock() {
     translate([REAR_BLOCK_X_DISTANCE,-(REAR_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK+REAR_BLOCK_LENGTH),0]) cube(size=[REAR_BLOCK_WIDTH, REAR_BLOCK_LENGTH, REAR_BLOCK_HEIGHT]);
}

module rearBlocks(){
     rearBlock();
     translate([REAR_BLOCKS_DISTANCE+REAR_BLOCK_WIDTH/2,0,0]) rearBlock();
}

module frontBlock() {
     difference(){
	  translate([FRONT_BLOCK_X_DISTANCE,FRONT_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK+SIDE_BLOCK_LENGTH,0]) cube(size=[FRONT_BLOCK_WIDTH,FRONT_BLOCK_LENGTH,FRONT_BLOCK_HEIGHT]);
	  translate([FRONT_BLOCK_X_DISTANCE+FRONT_BLOCK_WIDTH/2,FRONT_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK+SIDE_BLOCK_LENGTH+FRONT_BLOCK_LENGTH/2,FRONT_BLOCK_HEIGHT-FRONT_BLOCK_HOLE_DEPTH+0.1]) cylinder(h=FRONT_BLOCK_HOLE_DEPTH,r=FRONT_BLOCK_HOLE_RADIUS, center=false, $fn=100);
     }
}

module frontBlocks() {
     frontBlock();
     translate([FRONT_BLOCKS_DISTANCE+FRONT_BLOCK_WIDTH/2,0,0]) frontBlock();
}

module plate() {
     X_TRANSLATION = xTranslation();
     translate([X_TRANSLATION,-(REAR_BLOCK_WIDTH+REAR_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK),-PLATE_HEIGHT]) cube(size=[PLATE_WIDTH,PLATE_LENGTH,PLATE_HEIGHT]);
}

module wall() {
     difference() {
	  X_TRANSLATION=-(PLATE_WIDTH-(SIDE_BLOCK_HOLES_DISTANCE+SIDE_BLOCK_WIDTH/2))/2;
	  translate([X_TRANSLATION,PLATE_LENGTH-(REAR_BLOCK_WIDTH+REAR_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK),-PLATE_HEIGHT]) cube(size=[WALL_WIDTH,WALL_LENGTH,WALL_HEIGHT]);
	  usbHole();
     }
}

module usbHole() {
     X_TRANSLATION=(WALL_WIDTH-USB_HOLE_WIDTH)/2+ xTranslation();
     translate([X_TRANSLATION,PLATE_LENGTH-(REAR_BLOCK_WIDTH+REAR_BLOCK_Y_DISTANCE_FROM_SIDE_BLOCK)-0.1,USB_HOLE_STARTING_HEIGHT]) cube(size=[USB_HOLE_WIDTH, WALL_LENGTH+0.2, USB_HOLE_HEIGHT]);
}

function xTranslation() = -(PLATE_WIDTH-(SIDE_BLOCK_HOLES_DISTANCE+SIDE_BLOCK_WIDTH/2))/2;
